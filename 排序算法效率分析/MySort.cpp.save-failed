#include<iostream>
#include<algorithm>
#include<ctime>
#include"MySort.h"
MySort::MySort(int len)
{
MySort::len=len;

}

//判断是否成功的函数
bool MySort::judge(int J[])
{


for(int i=0;i<len-1;i++)
{
    if(J[i]>J[i+1]){

    return false;
    }
}

return true;

}

//插入排序
double  MySort::InsertSort(int R[],int len)
{

start =clock();

for(int i=0;i<len;i++)
{
int tem=R[i];
int j;
for( j=i-1;j>=0&&tem<R[j];j--)
{
    R[j+1]=R[j];
}
R[j+1]=tem;
}

over=clock();

if(judge(R))return (over-start)/1000;
else return -1;

}

//希尔排序
double MySort::ShellSort(int a[],int len)
{
    start=clock();
int INCRGAP = 3;
int insertNum = 0;

unsigned gap = len/3;
while(gap) // while gap>=1
    {
        for (int i = gap; i < len; ++i) // 分组，在每个子序列中进行插入排序
        {
            insertNum = a[i];//将当前的元素值先存起来方便后面插入
            unsigned j = i;
            while (j >= gap && insertNum < a[j-gap])//寻找插入位置
            {
                a[j] = a[j - gap];
                j -= gap;
            }
            a[j] = insertNum;
        }
        gap = gap/INCRGAP;
    }
        over=clock();
    if(judge(R))return (over-start)/1000;
    else return -1;

}



//冒泡排序
double MySort::BubbleSort(int R[],int len)
{
    start = clock();
for(int i=0;i<len;i++)
{
for(int j=i;j<len;j++)
{
    if(R[i]>R[j])std::swap(R[i],R[j]);
}
}

    over = clock();
    if(judge(R))return (over-start)/1000;
    else return -1;
}



//快速排序
void MySort::QuickSort(int s[],int l,int r)
{

    if (l < r)
    {
        //Swap(s[l], s[(l + r) / 2]); //将中间的这个数和第一个数交换
        int i = l, j = r, x = s[l];
        while (i < j)
        {
            while(i < j && s[j] >= x) // 从右向左找第一个小于x的数
                j--;
            if(i < j)
                s[i++] = s[j];

            while(i < j && s[i] < x) // 从左向右找第一个大于等于x的数
                i++;
            if(i < j)
                s[j--] = s[i];
        }
        s[i] = x;
        QuickSort(s, l, i - 1); // 递归调用
        QuickSort(s, i + 1, r);
    }


}
//归并排序
double MySort::mergeSort(int R[],int len)
{
    start = clock();
int* a = R;//将R[0]首地址给了a
    int* b = (int*) malloc(len * sizeof(int));
    int seg, start;
    for (seg = 1; seg < len; seg += seg) {
        for (start = 0; start < len; start += seg + seg) {
            int low = start, mid = std::min(start + seg, len), high =std::min(start + seg + seg, len);
            int k = low;
            int start1 = low, end1 = mid;
            int start2 = mid, end2 = high;
            while (start1 < end1 && start2 < end2)
                b[k++] = a[start1] < a[start2] ? a[start1++] : a[start2++];
            while (start1 < end1)
                b[k++] = a[start1++];
            while (start2 < end2)
                b[k++] = a[start2++];
        }
        int* temp = a;
        a = b;
        b = temp;
    }
    if (a != R) {
        int i;
        for (i = 0; i < len; i++)
            b[i] = a[i];
        b = a;
    }
    free(b);

    over = clock();

    if(judge(R))return (over-start)/1000;
    else return -1;


}

//简单选择排序
double MySort::selectShow(int R[],int len)
{
    start = clock();
    int tem;//因为我们是从1开始的
    for(int i=0;i<len-1;i++){
            tem=i;
        for(int j=i+1;j<len;j++)
            if(R[j]>R[tem])tem=j;

        std::swap(R[i],R[tem]);
    }
    over = clock();

    if(judge(R))return (over-start)/1000;
    else return -1;

}



